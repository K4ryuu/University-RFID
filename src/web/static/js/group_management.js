// Group management functions for RFID Card Management System

function showGroupManagementModal(e) {
    e.preventDefault();

    const groupsTable = `
        <div class="management-actions mb-lg">
            <button id="add-group-btn" class="primary-button">√öj csoport</button>
            <div class="search-container">
                <span class="search-icon">üîç</span>
                <input type="text" class="search-input" id="group-search" placeholder="Keres√©s...">
            </div>
        </div>
        <div class="table-responsive">
            <table id="groups-table">
                <thead>
                    <tr>
                        <th style="width: 30%">N√©v</th>
                        <th style="width: 40%">Le√≠r√°s</th>
                        <th style="width: 30%">M≈±veletek</th>
                    </tr>
                </thead>
                <tbody>
                    ${groups.map(group => `
                        <tr>
                            <td>${group.name}</td>
                            <td>${group.description || 'Nincs le√≠r√°s'}</td>
                            <td class="actions">
                                <button class="edit-group" data-id="${group.id}">Szerkeszt√©s</button>
                                <button class="delete-group" data-id="${group.id}">T√∂rl√©s</button>
                                <button class="manage-members" data-id="${group.id}">Tagok</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;

    showModal('Csoportok kezel√©se', groupsTable);

    setTimeout(() => {
        document.getElementById('add-group-btn').addEventListener('click', showAddGroupForm);

        document.querySelectorAll('.edit-group').forEach(button => {
            button.addEventListener('click', () => {
                const groupId = button.getAttribute('data-id');
                showEditGroupForm(groupId);
            });
        });

        document.querySelectorAll('.delete-group').forEach(button => {
            button.addEventListener('click', async () => {
                const groupId = button.getAttribute('data-id');
                if (confirm('Biztosan t√∂r√∂lni szeretn√© ezt a csoportot?')) {
                    await deleteGroup(groupId);
                }
            });
        });

        document.querySelectorAll('.manage-members').forEach(button => {
            button.addEventListener('click', () => {
                const groupId = button.getAttribute('data-id');
                showGroupMembersModal(groupId);
            });
        });

        // Keres√©s be√°ll√≠t√°sa
        const searchInput = document.getElementById('group-search');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                const searchText = e.target.value.toLowerCase();
                const table = document.getElementById('groups-table');
                if (!table) return;

                const rows = table.querySelectorAll('tbody tr');
                let hasVisibleRows = false;

                rows.forEach(row => {
                    const nameCell = row.querySelector('td:nth-child(1)');
                    const descriptionCell = row.querySelector('td:nth-child(2)');

                    if (!nameCell || !descriptionCell) return;

                    const name = nameCell.textContent.toLowerCase();
                    const description = descriptionCell.textContent.toLowerCase();

                    const isVisible = name.includes(searchText) || description.includes(searchText);
                    row.style.display = isVisible ? '' : 'none';

                    if (isVisible) hasVisibleRows = true;

                    // Ha nincs keres√©si sz√∂veg, vissza√°ll√≠tjuk az eredeti sz√∂veget
                    if (searchText === '') {
                        nameCell.innerHTML = nameCell.textContent;
                        descriptionCell.innerHTML = descriptionCell.textContent;
                    } else {
                        // Kiemelj√ºk a keresett sz√∂veget
                        nameCell.innerHTML = highlightText(nameCell.textContent, searchText);
                        descriptionCell.innerHTML = highlightText(descriptionCell.textContent, searchText);
                    }
                });

                // Nincs tal√°lat √ºzenet megjelen√≠t√©se
                let noResultsMessage = table.parentNode.querySelector('.no-results');
                if (!hasVisibleRows && searchText !== '') {
                    if (!noResultsMessage) {
                        noResultsMessage = document.createElement('div');
                        noResultsMessage.className = 'no-results';
                        noResultsMessage.textContent = 'Nincs tal√°lat a keres√©si felt√©teleknek megfelel≈ëen';
                        table.parentNode.appendChild(noResultsMessage);
                    }
                    noResultsMessage.style.display = 'block';
                } else if (noResultsMessage) {
                    noResultsMessage.style.display = 'none';
                }

                // Scrollbar ellen≈ërz√©se a keres√©s ut√°n
                if (typeof checkScrollbars === 'function') {
                    setTimeout(checkScrollbars, 50);
                }
            });
        }
    }, 0);
}

function showAddGroupForm() {
    const groupForm = `
        <form id="group-form">
            <div class="form-group">
                <label for="name">N√©v</label>
                <input type="text" id="name" name="name" required placeholder="A csoport neve">
                <div class="form-hint">Adjon meg egy egyedi, k√∂nnyen azonos√≠that√≥ nevet</div>
            </div>
            <div class="form-group">
                <label for="description">Le√≠r√°s</label>
                <input type="text" id="description" name="description" placeholder="A csoport r√∂vid le√≠r√°sa">
                <div class="form-hint">Opcion√°lis mez≈ë a csoport c√©lj√°nak, funkci√≥j√°nak le√≠r√°s√°ra</div>
            </div>
            <div class="form-group">
                <label for="parent-group">Sz√ºl≈ë csoport (opcion√°lis)</label>
                <select id="parent-group" name="parent-group">
                    <option value="">Nincs sz√ºl≈ë csoport</option>
                    ${groups.map(group => `<option value="${group.id}">${group.name}</option>`).join('')}
                </select>
                <div class="form-hint">V√°lasszon sz√ºl≈ë csoportot a hierarchikus strukt√∫r√°hoz</div>
            </div>
        </form>
    `;

    const handleConfirm = async () => {
        const name = document.getElementById('name').value;
        const description = document.getElementById('description').value;
        const parentGroupSelect = document.getElementById('parent-group');
        const parentId = parentGroupSelect.value ? Number(parentGroupSelect.value) : null;
        const accessLevel = "restricted"; // Minden csoport csak restricted lehet

        // R√©szletes hibaellen≈ërz√©s
        if (!name) {
            alert('K√©rj√ºk, adja meg a csoport nev√©t!');
            return;
        }

        try {
            const response = await fetch('/api/groups', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify({
                    name,
                    description,
                    parent_id: parentId,
                    access_level: accessLevel
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Nem siker√ºlt a csoport l√©trehoz√°sa');
            }

            alert('Csoport sikeresen l√©trehozva!');
            hideModal();
            await fetchGroups();
            showGroupManagementModal(new Event('click'));
        } catch (error) {
            alert('Hiba t√∂rt√©nt: ' + error.message);
        }
    };

    showModal('√öj csoport hozz√°ad√°sa', groupForm, handleConfirm);
}

async function showEditGroupForm(groupId) {
    try {
        const response = await fetch(`/api/groups/${groupId}?include_parent=true`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            throw new Error('Nem siker√ºlt a csoport adatainak lek√©r√©se');
        }

        const group = await response.json();

        const groupForm = `
            <form id="edit-group-form">
                <div class="form-group">
                    <label for="name">N√©v</label>
                    <input type="text" id="name" name="name" value="${group.name}" required>
                    <div class="form-hint">Adjon meg egy egyedi, k√∂nnyen azonos√≠that√≥ nevet</div>
                </div>
                <div class="form-group">
                    <label for="description">Le√≠r√°s</label>
                    <input type="text" id="description" name="description" value="${group.description || ''}">
                    <div class="form-hint">Opcion√°lis mez≈ë a csoport c√©lj√°nak, funkci√≥j√°nak le√≠r√°s√°ra</div>
                </div>
                <div class="form-group">
                    <label for="parent-group">Sz√ºl≈ë csoport (opcion√°lis)</label>
                    <select id="parent-group" name="parent-group">
                        <option value="">Nincs sz√ºl≈ë csoport</option>
                        ${groups
                            .filter(g => g.id !== group.id) // Kiz√°rjuk az aktu√°lis csoportot
                            .map(g => `<option value="${g.id}" ${group.parent_id && g.id === group.parent_id ? 'selected' : ''}>${g.name}</option>`)
                            .join('')}
                    </select>
                    <div class="form-hint">V√°lasszon sz√ºl≈ë csoportot a hierarchikus strukt√∫r√°hoz</div>
                </div>
            </form>
        `;

        const handleConfirm = async () => {
            const name = document.getElementById('name').value;
            const description = document.getElementById('description').value;
            const parentGroupSelect = document.getElementById('parent-group');
            const parentId = parentGroupSelect.value ? Number(parentGroupSelect.value) : null;
            const accessLevel = "restricted"; // Minden csoport csak restricted lehet

            // R√©szletes hibaellen≈ërz√©s
            if (!name) {
                alert('K√©rj√ºk, adja meg a csoport nev√©t!');
                return;
            }

            try {
                const response = await fetch(`/api/groups/${groupId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        name,
                        description,
                        parent_id: parentId,
                        access_level: accessLevel
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Nem siker√ºlt a csoport friss√≠t√©se');
                }

                alert('Csoport sikeresen friss√≠tve!');
                hideModal();
                await fetchGroups();
                showGroupManagementModal(new Event('click'));
            } catch (error) {
                alert('Hiba t√∂rt√©nt: ' + error.message);
            }
        };

        showModal('Csoport szerkeszt√©se', groupForm, handleConfirm);
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function deleteGroup(groupId) {
    try {
        const response = await fetch(`/api/groups/${groupId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Nem siker√ºlt a csoport t√∂rl√©se');
        }

        alert('Csoport sikeresen t√∂r√∂lve!');
        await fetchGroups();
        showGroupManagementModal(new Event('click'));
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function showGroupMembersModal(groupId) {
    try {
        // Lek√©rj√ºk a csoport adatait
        const response = await fetch(`/api/groups/${groupId}?include_users=true&include_rooms=true`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            throw new Error('Nem siker√ºlt a csoport adatainak lek√©r√©se');
        }

        const group = await response.json();

        // Tabf√ºles UI a felhaszn√°l√≥k √©s helyis√©gek k√∂z√∂tt v√°lt√°shoz
        const membersContent = `
            <div class="tabs">
                <div class="tab-header">
                    <div class="tab-btn active" data-tab="users">Felhaszn√°l√≥k</div>
                    <div class="tab-btn" data-tab="rooms">Helyis√©gek</div>
                </div>
                <div class="tab-content">
                    <div class="tab-pane active" id="users-tab">
                        <div class="management-actions mb-lg">
                            <button id="add-user-to-group-btn" class="primary-button">Felhaszn√°l√≥ hozz√°ad√°sa</button>
                        </div>
                        <h3>Csoporttagok</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th style="width: 40%">N√©v</th>
                                    <th style="width: 35%">Felhaszn√°l√≥n√©v</th>
                                    <th style="width: 25%">M≈±veletek</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${group.users && group.users.length ?
                                    group.users.map(user => `
                                        <tr>
                                            <td>${user.first_name} ${user.last_name}</td>
                                            <td>${user.username}</td>
                                            <td class="actions">
                                                <button class="remove-user-from-group" data-user-id="${user.id}">Elt√°vol√≠t√°s</button>
                                            </td>
                                        </tr>
                                    `).join('') :
                                    '<tr><td colspan="3" class="text-center">Nincsenek felhaszn√°l√≥k a csoportban</td></tr>'
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="tab-pane" id="rooms-tab">
                        <div class="management-actions mb-lg">
                            <button id="add-room-to-group-btn" class="primary-button">Helyis√©g hozz√°ad√°sa</button>
                        </div>
                        <h3>Csoporthoz rendelt helyis√©gek</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th style="width: 25%">N√©v</th>
                                    <th style="width: 20%">√âp√ºlet</th>
                                    <th style="width: 15%">Teremsz√°m</th>
                                    <th style="width: 20%">Hozz√°f√©r√©si szint</th>
                                    <th style="width: 20%">M≈±veletek</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${group.rooms && group.rooms.length ?
                                    group.rooms.map(room => `
                                        <tr>
                                            <td>${room.name}</td>
                                            <td>${room.building}</td>
                                            <td>${room.room_number}</td>
                                            <td><span class="badge ${getBadgeClassForAccessLevel(room.access_level)}">${translateAccessLevel(room.access_level)}</span></td>
                                            <td class="actions">
                                                <button class="remove-room-from-group" data-room-id="${room.id}">Elt√°vol√≠t√°s</button>
                                            </td>
                                        </tr>
                                    `).join('') :
                                    '<tr><td colspan="5" class="text-center">Nincsenek helyis√©gek a csoporthoz rendelve</td></tr>'
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;

        showModal(`"${group.name}" csoport kezel√©se`, membersContent);

        // Esem√©nykezel≈ëk be√°ll√≠t√°sa
        setTimeout(() => {
            // Tab funkci√≥k
            document.querySelectorAll('.tab-btn').forEach(tab => {
                tab.addEventListener('click', () => {
                    // Akt√≠v tab friss√≠t√©se
                    document.querySelectorAll('.tab-btn').forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');

                    // Akt√≠v tartalom friss√≠t√©se
                    document.querySelectorAll('.tab-pane').forEach(p => p.classList.remove('active'));
                    document.getElementById(`${tab.getAttribute('data-tab')}-tab`).classList.add('active');
                });
            });

            // Felhaszn√°l√≥ hozz√°ad√°sa gomb
            document.getElementById('add-user-to-group-btn').addEventListener('click', () => {
                showAddUserToGroupForm(groupId);
            });

            // Helyis√©g hozz√°ad√°sa gomb
            document.getElementById('add-room-to-group-btn').addEventListener('click', () => {
                showAddRoomToGroupForm(groupId);
            });

            // Felhaszn√°l√≥ elt√°vol√≠t√°sa gombok
            document.querySelectorAll('.remove-user-from-group').forEach(button => {
                button.addEventListener('click', async () => {
                    const userId = button.getAttribute('data-user-id');
                    if (confirm('Biztosan el szeretn√© t√°vol√≠tani ezt a felhaszn√°l√≥t a csoportb√≥l?')) {
                        await removeUserFromGroup(groupId, userId);
                    }
                });
            });

            // Helyis√©g elt√°vol√≠t√°sa gombok
            document.querySelectorAll('.remove-room-from-group').forEach(button => {
                button.addEventListener('click', async () => {
                    const roomId = button.getAttribute('data-room-id');
                    if (confirm('Biztosan el szeretn√© t√°vol√≠tani ezt a helyis√©get a csoportb√≥l?')) {
                        await removeRoomFromGroup(groupId, roomId);
                    }
                });
            });
        }, 0);
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function showAddUserToGroupForm(groupId) {
    try {
        // Lek√©rj√ºk a csoport adatait, hogy tudjuk, kik vannak m√°r benne
        const groupResponse = await fetch(`/api/groups/${groupId}?include_users=true`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!groupResponse.ok) {
            throw new Error('Nem siker√ºlt a csoport adatainak lek√©r√©se');
        }

        const group = await groupResponse.json();

        // Lesz≈±rj√ºk azokat a felhaszn√°l√≥kat, akik m√©g nincsenek a csoportban
        const existingUserIds = group.users ? group.users.map(user => user.id) : [];

        const availableUsers = users.filter(user => !existingUserIds.includes(user.id));

        if (availableUsers.length === 0) {
            alert('Nincs t√∂bb felhaszn√°l√≥, akit hozz√°adhatna a csoporthoz.');
            return;
        }

        const addUserForm = `
            <form id="add-user-to-group-form">
                <div class="form-group">
                    <label for="user-select">Felhaszn√°l√≥</label>
                    <select id="user-select" name="user-select" required>
                        <option value="">V√°lasszon felhaszn√°l√≥t</option>
                        ${availableUsers.map(user => `<option value="${user.id}">${user.first_name} ${user.last_name} (${user.username})</option>`).join('')}
                    </select>
                    <div class="form-hint">V√°lassza ki a csoporthoz adand√≥ felhaszn√°l√≥t</div>
                </div>
            </form>
        `;

        const handleConfirm = async () => {
            const userSelect = document.getElementById('user-select');
            const userId = userSelect.value;

            if (!userId) {
                alert('K√©rj√ºk, v√°lasszon felhaszn√°l√≥t!');
                return;
            }

            try {
                const response = await fetch(`/api/groups/${groupId}/users`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        user_id: Number(userId)
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Nem siker√ºlt a felhaszn√°l√≥ hozz√°ad√°sa a csoporthoz');
                }

                alert('Felhaszn√°l√≥ sikeresen hozz√°adva a csoporthoz!');
                hideModal();
                await fetchGroups();
                showGroupMembersModal(groupId);
            } catch (error) {
                alert('Hiba t√∂rt√©nt: ' + error.message);
            }
        };

        showModal('Felhaszn√°l√≥ hozz√°ad√°sa a csoporthoz', addUserForm, handleConfirm);
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function showAddRoomToGroupForm(groupId) {
    try {
        // Lek√©rj√ºk a csoport adatait, hogy tudjuk, mely helyis√©gek vannak m√°r hozz√°rendelve
        const groupResponse = await fetch(`/api/groups/${groupId}?include_rooms=true`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!groupResponse.ok) {
            throw new Error('Nem siker√ºlt a csoport adatainak lek√©r√©se');
        }

        const group = await groupResponse.json();

        // Lesz≈±rj√ºk azokat a helyis√©geket, amelyek m√©g nincsenek a csoporthoz rendelve
        const existingRoomIds = group.rooms ? group.rooms.map(room => room.id) : [];

        const availableRooms = rooms.filter(room => !existingRoomIds.includes(room.id));

        if (availableRooms.length === 0) {
            alert('Nincs t√∂bb helyis√©g, amit hozz√°adhatna a csoporthoz.');
            return;
        }

        const addRoomForm = `
            <form id="add-room-to-group-form">
                <div class="form-group">
                    <label for="room-select">Helyis√©g</label>
                    <select id="room-select" name="room-select" required>
                        <option value="">V√°lasszon helyis√©get</option>
                        ${availableRooms.map(room => `<option value="${room.id}">${room.name} (${room.building}, ${room.room_number})</option>`).join('')}
                    </select>
                    <div class="form-hint">V√°lassza ki a csoporthoz rendelend≈ë helyis√©get</div>
                </div>
            </form>
        `;

        const handleConfirm = async () => {
            const roomSelect = document.getElementById('room-select');
            const roomId = roomSelect.value;

            if (!roomId) {
                alert('K√©rj√ºk, v√°lasszon helyis√©get!');
                return;
            }

            try {
                const response = await fetch(`/api/groups/${groupId}/rooms`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        room_id: Number(roomId)
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Nem siker√ºlt a helyis√©g hozz√°ad√°sa a csoporthoz');
                }

                alert('Helyis√©g sikeresen hozz√°adva a csoporthoz!');
                hideModal();
                await fetchGroups();
                showGroupMembersModal(groupId);
            } catch (error) {
                alert('Hiba t√∂rt√©nt: ' + error.message);
            }
        };

        showModal('Helyis√©g hozz√°ad√°sa a csoporthoz', addRoomForm, handleConfirm);
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function removeUserFromGroup(groupId, userId) {
    try {
        const response = await fetch(`/api/groups/${groupId}/users/${userId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Nem siker√ºlt a felhaszn√°l√≥ elt√°vol√≠t√°sa a csoportb√≥l');
        }

        alert('Felhaszn√°l√≥ sikeresen elt√°vol√≠tva a csoportb√≥l!');
        await fetchGroups();
        showGroupMembersModal(groupId);
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function removeRoomFromGroup(groupId, roomId) {
    try {
        const response = await fetch(`/api/groups/${groupId}/rooms/${roomId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Nem siker√ºlt a helyis√©g elt√°vol√≠t√°sa a csoportb√≥l');
        }

        alert('Helyis√©g sikeresen elt√°vol√≠tva a csoportb√≥l!');
        await fetchGroups();
        showGroupMembersModal(groupId);
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}
// Card management functions for RFID Card Management System

function showCardManagementModal(e) {
    if (e) e.preventDefault();

    // Tabs hozz√°ad√°sa a k√ºl√∂nb√∂z≈ë n√©zetekhez
    const cardsTable = `
        <div class="tabs">
            <div class="tab-header">
                <div class="tab-btn active" data-tab="all-cards">√ñsszes k√°rtya</div>
                <div class="tab-btn" data-tab="expiring-cards">Lej√°r√≥ k√°rty√°k</div>
            </div>
            <div class="tab-content">
                <div class="tab-pane active" id="all-cards">
                    <div class="management-actions mb-lg">
                        <button id="add-card-btn" class="primary-button">√öj k√°rtya regisztr√°l√°sa</button>
                        <div class="search-container">
                            <span class="search-icon">üîç</span>
                            <input type="text" class="search-input" id="card-search" placeholder="Keres√©s...">
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table id="cards-table">
                            <thead>
                                <tr>
                                    <th style="width: 15%">K√°rtya ID</th>
                                    <th style="width: 25%">Felhaszn√°l√≥</th>
                                    <th style="width: 15%">St√°tusz</th>
                                    <th style="width: 15%">Lej√°rati d√°tum</th>
                                    <th style="width: 30%">M≈±veletek</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${cards.map(card => {
                                    const user = card.user ? `${card.user.first_name} ${card.user.last_name}` : 'Nincs hozz√°rendelve';
                                    const statusBadgeClass = getCardStatusBadge(card.status);
                                    const statusText = translateCardStatus(card.status);
                                    const expiryDate = card.expiry_date ? new Date(card.expiry_date).toLocaleDateString('hu-HU') : 'Nincs lej√°rat';

                                    return `
                                        <tr>
                                            <td>${card.card_id}</td>
                                            <td>${user}</td>
                                            <td><span class="badge ${statusBadgeClass}">${statusText}</span></td>
                                            <td>${expiryDate}</td>
                                            <td class="actions">
                                                <button class="edit-card" data-id="${card.id}">Szerkeszt√©s</button>
                                                <button class="delete-card" data-id="${card.id}">T√∂rl√©s</button>
                                                ${card.status === 'active' ? `<button class="block-card" data-id="${card.id}">Blokkol√°s</button>` : ''}
                                                ${card.status === 'blocked' ? `<button class="unblock-card" data-id="${card.id}">Felold√°s</button>` : ''}
                                                ${card.status !== 'revoked' ? `<button class="revoke-card" data-id="${card.id}">Visszavon√°s</button>` : ''}
                                            </td>
                                        </tr>
                                    `;
                                }).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="tab-pane" id="expiring-cards">
                    <div class="management-actions mb-lg">
                        <button id="refresh-expiring-btn" class="primary-button">Friss√≠t√©s</button>
                        <div class="search-container">
                            <span class="search-icon">üîç</span>
                            <input type="text" class="search-input" id="expiring-card-search" placeholder="Keres√©s...">
                        </div>
                    </div>
                    <div id="tab-expiring-container">
                        <p class="loading-message">Lej√°r√≥ k√°rty√°k bet√∂lt√©se...</p>
                    </div>
                </div>
            </div>
        </div>
    `;

    showModal('K√°rty√°k kezel√©se', cardsTable);

    setTimeout(() => {
        // Ellen≈ërizz√ºk a scrollbarokat a modal megjelen√≠t√©se ut√°n
        if (typeof checkScrollbars === 'function') {
            checkScrollbars();
        }
        
        // Tab kezel√©s
        document.querySelectorAll('.tab-btn').forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');

                // Tab gomb aktiv√°l√°sa
                document.querySelectorAll('.tab-btn').forEach(t => t.classList.remove('active'));
                tab.classList.add('active');

                // Tab tartalom megjelen√≠t√©se
                document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));
                document.getElementById(tabId).classList.add('active');

                // Ha a lej√°r√≥ k√°rty√°k tabra v√°ltunk, bet√∂ltj√ºk a lej√°r√≥ k√°rty√°kat
                if (tabId === 'expiring-cards') {
                    loadExpiringCardsTab();
                } else {
                    // Tab v√°lt√°s ut√°n mindig ellen≈ërizz√ºk a scrollbart
                    if (typeof checkScrollbars === 'function') {
                        setTimeout(checkScrollbars, 50);
                    }
                }
            });
        });

        // "√ñsszes k√°rtya" tab esem√©nykezel≈ëi
        document.getElementById('add-card-btn').addEventListener('click', showCardRegistrationModal);

        document.querySelectorAll('.edit-card').forEach(button => {
            button.addEventListener('click', () => {
                const cardId = button.getAttribute('data-id');
                showEditCardForm(cardId);
            });
        });

        document.querySelectorAll('.delete-card').forEach(button => {
            button.addEventListener('click', async () => {
                const cardId = button.getAttribute('data-id');
                if (confirm('Biztosan t√∂r√∂lni szeretn√© ezt a k√°rty√°t? Ez az √∂sszes kapcsol√≥d√≥ jogosults√°got is t√∂r√∂lni fogja.')) {
                    await deleteCard(cardId);
                }
            });
        });

        document.querySelectorAll('.block-card').forEach(button => {
            button.addEventListener('click', async () => {
                const cardId = button.getAttribute('data-id');
                if (confirm('Biztosan blokkolni szeretn√© ezt a k√°rty√°t? A k√°rtya ideiglenes letilt√°sra ker√ºl.')) {
                    await blockCard(cardId);
                }
            });
        });

        document.querySelectorAll('.unblock-card').forEach(button => {
            button.addEventListener('click', async () => {
                const cardId = button.getAttribute('data-id');
                if (confirm('Biztosan fel szeretn√© oldani ezt a k√°rty√°t? A k√°rtya ism√©t haszn√°lhat√≥ lesz.')) {
                    await unblockCard(cardId);
                }
            });
        });

        document.querySelectorAll('.revoke-card').forEach(button => {
            button.addEventListener('click', async () => {
                const cardId = button.getAttribute('data-id');
                if (confirm('Biztosan vissza szeretn√© vonni ezt a k√°rty√°t? Ez a m≈±velet nem visszaford√≠that√≥.')) {
                    await revokeCard(cardId);
                }
            });
        });

        // "Lej√°r√≥ k√°rty√°k" tab esem√©nykezel≈ëi
        document.getElementById('refresh-expiring-btn')?.addEventListener('click', () => {
            loadExpiringCardsTab();
        });
        
        // K√°rtyakeres√©s be√°ll√≠t√°sa - "√ñsszes k√°rtya" tab
        const cardSearchInput = document.getElementById('card-search');
        if (cardSearchInput) {
            cardSearchInput.addEventListener('input', (e) => {
                const searchText = e.target.value.toLowerCase();
                const table = document.getElementById('cards-table');
                if (!table) return;
                
                const rows = table.querySelectorAll('tbody tr');
                let hasVisibleRows = false;
                
                rows.forEach(row => {
                    const cardIdCell = row.querySelector('td:nth-child(1)');
                    const userCell = row.querySelector('td:nth-child(2)');
                    const statusCell = row.querySelector('td:nth-child(3)');
                    const expiryCell = row.querySelector('td:nth-child(4)');
                    
                    if (!cardIdCell || !userCell || !statusCell || !expiryCell) return;
                    
                    const cardId = cardIdCell.textContent.toLowerCase();
                    const user = userCell.textContent.toLowerCase();
                    const status = statusCell.textContent.toLowerCase();
                    const expiry = expiryCell.textContent.toLowerCase();
                    
                    const isVisible = cardId.includes(searchText) || 
                                     user.includes(searchText) || 
                                     status.includes(searchText) || 
                                     expiry.includes(searchText);
                    
                    row.style.display = isVisible ? '' : 'none';
                    
                    if (isVisible) hasVisibleRows = true;
                    
                    // Ha nincs keres√©si sz√∂veg, vissza√°ll√≠tjuk az eredeti sz√∂veget
                    if (searchText === '') {
                        cardIdCell.innerHTML = cardIdCell.textContent;
                        userCell.innerHTML = userCell.textContent;
                        // A st√°tusz cell√°ban meg≈ërizz√ºk a badge-et
                        const badge = statusCell.querySelector('.badge');
                        if (badge) {
                            statusCell.innerHTML = '';
                            statusCell.appendChild(badge.cloneNode(true));
                        } else {
                            statusCell.innerHTML = statusCell.textContent;
                        }
                        expiryCell.innerHTML = expiryCell.textContent;
                    } else {
                        // Kiemelj√ºk a keresett sz√∂veget
                        cardIdCell.innerHTML = highlightText(cardIdCell.textContent, searchText);
                        userCell.innerHTML = highlightText(userCell.textContent, searchText);
                        
                        // A st√°tusz cell√°ban meg≈ërizz√ºk a badge-et
                        const badge = statusCell.querySelector('.badge');
                        if (badge) {
                            const badgeText = badge.textContent;
                            const badgeHtml = badge.outerHTML.replace(badgeText, highlightText(badgeText, searchText));
                            statusCell.innerHTML = badgeHtml;
                        } else {
                            statusCell.innerHTML = highlightText(statusCell.textContent, searchText);
                        }
                        
                        expiryCell.innerHTML = highlightText(expiryCell.textContent, searchText);
                    }
                });
                
                // Nincs tal√°lat √ºzenet megjelen√≠t√©se
                let noResultsMessage = table.parentNode.querySelector('.no-results');
                if (!hasVisibleRows && searchText !== '') {
                    if (!noResultsMessage) {
                        noResultsMessage = document.createElement('div');
                        noResultsMessage.className = 'no-results';
                        noResultsMessage.textContent = 'Nincs tal√°lat a keres√©si felt√©teleknek megfelel≈ëen';
                        table.parentNode.appendChild(noResultsMessage);
                    }
                    noResultsMessage.style.display = 'block';
                } else if (noResultsMessage) {
                    noResultsMessage.style.display = 'none';
                }
                
                // Scrollbar ellen≈ërz√©se a keres√©s ut√°n
                if (typeof checkScrollbars === 'function') {
                    setTimeout(checkScrollbars, 50);
                }
            });
        }
        
        // K√°rtyakeres√©s be√°ll√≠t√°sa a lej√°r√≥ k√°rty√°k f√ºlh√∂z
        const expiringCardSearchInput = document.getElementById('expiring-card-search');
        if (expiringCardSearchInput) {
            expiringCardSearchInput.addEventListener('input', (e) => {
                const searchText = e.target.value.toLowerCase();
                
                // A keres√©s csak akkor m≈±k√∂dik, ha m√°r bet√∂lt≈ëdtek a lej√°r√≥ k√°rty√°k
                const table = document.querySelector('#tab-expiring-container table');
                if (!table) return;
                
                const rows = table.querySelectorAll('tbody tr');
                let hasVisibleRows = false;
                
                rows.forEach(row => {
                    const userCell = row.querySelector('td:nth-child(1)');
                    const cardIdCell = row.querySelector('td:nth-child(2)');
                    const expiryCell = row.querySelector('td:nth-child(3)');
                    const daysCell = row.querySelector('td:nth-child(4)');
                    
                    if (!userCell || !cardIdCell || !expiryCell || !daysCell) return;
                    
                    const user = userCell.textContent.toLowerCase();
                    const cardId = cardIdCell.textContent.toLowerCase();
                    const expiry = expiryCell.textContent.toLowerCase();
                    const days = daysCell.textContent.toLowerCase();
                    
                    const isVisible = user.includes(searchText) || 
                                     cardId.includes(searchText) || 
                                     expiry.includes(searchText) ||
                                     days.includes(searchText);
                    
                    row.style.display = isVisible ? '' : 'none';
                    
                    if (isVisible) hasVisibleRows = true;
                    
                    // Ha nincs keres√©si sz√∂veg, vissza√°ll√≠tjuk az eredeti sz√∂veget
                    if (searchText === '') {
                        userCell.innerHTML = userCell.textContent;
                        cardIdCell.innerHTML = cardIdCell.textContent;
                        expiryCell.innerHTML = expiryCell.textContent;
                        
                        // A napok cell√°ban meg≈ërizz√ºk a badge-et
                        const badge = daysCell.querySelector('.badge');
                        if (badge) {
                            daysCell.innerHTML = '';
                            daysCell.appendChild(badge.cloneNode(true));
                        } else {
                            daysCell.innerHTML = daysCell.textContent;
                        }
                    } else {
                        // Kiemelj√ºk a keresett sz√∂veget
                        userCell.innerHTML = highlightText(userCell.textContent, searchText);
                        cardIdCell.innerHTML = highlightText(cardIdCell.textContent, searchText);
                        expiryCell.innerHTML = highlightText(expiryCell.textContent, searchText);
                        
                        // A napok cell√°ban meg≈ërizz√ºk a badge-et
                        const badge = daysCell.querySelector('.badge');
                        if (badge) {
                            const badgeText = badge.textContent;
                            const badgeHtml = badge.outerHTML.replace(badgeText, highlightText(badgeText, searchText));
                            daysCell.innerHTML = badgeHtml;
                        } else {
                            daysCell.innerHTML = highlightText(daysCell.textContent, searchText);
                        }
                    }
                });
                
                // Nincs tal√°lat √ºzenet megjelen√≠t√©se
                const container = document.getElementById('tab-expiring-container');
                let noResultsMessage = container.querySelector('.no-results');
                
                if (!hasVisibleRows && searchText !== '') {
                    if (!noResultsMessage) {
                        noResultsMessage = document.createElement('div');
                        noResultsMessage.className = 'no-results';
                        noResultsMessage.textContent = 'Nincs tal√°lat a keres√©si felt√©teleknek megfelel≈ëen';
                        container.appendChild(noResultsMessage);
                    }
                    noResultsMessage.style.display = 'block';
                } else if (noResultsMessage) {
                    noResultsMessage.style.display = 'none';
                }
                
                // Scrollbar ellen≈ërz√©se a keres√©s ut√°n
                if (typeof checkScrollbars === 'function') {
                    setTimeout(checkScrollbars, 50);
                }
            });
        }
    }, 50);
}

async function showEditCardForm(cardId) {
    try {
        const response = await fetch(`/api/cards/${cardId}`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            throw new Error('Nem siker√ºlt a k√°rtya adatainak lek√©r√©se');
        }

        const card = await response.json();

        // Fetch users for the dropdown
        await fetchUsers();

        const expiryDate = card.expiry_date ? new Date(card.expiry_date).toISOString().split('T')[0] : '';

        // Sz≈±rj√ºk ki azokat a felhaszn√°l√≥kat, akiknek m√°r van k√°rty√°juk, kiv√©ve a jelenlegi k√°rtya tulajdonos√°t
        const usersWithCards = cards
            .filter(c => c.id !== card.id)  // Kihagyjuk a jelenlegi k√°rty√°t
            .map(c => c.user_id);

        // Az el√©rhet≈ë felhaszn√°l√≥k: akiknek nincs m√°s k√°rty√°juk, vagy ≈ëk a jelenlegi k√°rtya tulajdonosai
        const availableUsers = users.filter(user =>
            !usersWithCards.includes(user.id) || user.id === card.user_id
        );

        const cardForm = `
            <form id="edit-card-form">
                <div class="form-group">
                    <label for="edit-card-id">K√°rtya azonos√≠t√≥</label>
                    <input type="text" id="edit-card-id" name="card-id" value="${card.card_id}" readonly>
                    <div class="form-hint">A k√°rtya azonos√≠t√≥ja nem m√≥dos√≠that√≥</div>
                </div>
                <div class="form-group">
                    <label for="edit-user-select">Felhaszn√°l√≥</label>
                    <select id="edit-user-select" name="user-select">
                        <option value="">V√°lasszon felhaszn√°l√≥t</option>
                        ${availableUsers.map(user => `<option value="${user.id}" ${user.id === card.user_id ? 'selected' : ''}>${user.first_name} ${user.last_name}</option>`).join('')}
                    </select>
                    <div class="form-hint">Csak olyan felhaszn√°l√≥k jelennek meg, akiknek nincs m√°s k√°rty√°juk</div>
                </div>
                <div class="form-group">
                    <label for="edit-expiry-date">Lej√°rati d√°tum (opcion√°lis)</label>
                    <input type="date" id="edit-expiry-date" name="expiry-date" value="${expiryDate}">
                    <div class="form-hint">Ha √ºresen hagyja, a k√°rtya nem j√°r le</div>
                </div>
                <div class="form-group">
                    <label for="edit-status">St√°tusz</label>
                    <select id="edit-status" name="status">
                        <option value="active" ${card.status === 'active' ? 'selected' : ''}>Akt√≠v</option>
                        <option value="blocked" ${card.status === 'blocked' ? 'selected' : ''}>Blokkolt</option>
                        <option value="revoked" ${card.status === 'revoked' ? 'selected' : ''}>Visszavont</option>
                    </select>
                </div>
            </form>
        `;

        const handleConfirm = async () => {
            const userId = document.getElementById('edit-user-select').value;
            const expiryDateElement = document.getElementById('edit-expiry-date');
            const expiryDate = expiryDateElement.value ? new Date(expiryDateElement.value) : null;
            const status = document.getElementById('edit-status').value;

            try {
                const response = await fetch(`/api/cards/${cardId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        user_id: userId ? Number(userId) : null,
                        expiry_date: expiryDate,
                        status: status
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Nem siker√ºlt a k√°rtya friss√≠t√©se');
                }

                alert('K√°rtya sikeresen friss√≠tve!');
                hideModal();
                await fetchCards();
                showCardManagementModal(new Event('click'));
            } catch (error) {
                alert('Hiba t√∂rt√©nt: ' + error.message);
            }
        };

        showModal('K√°rtya szerkeszt√©se', cardForm, handleConfirm);
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

function showCardRegistrationModal(e) {
    e.preventDefault();

    // Ellen≈ërizz√ºk, hogy vannak-e felhaszn√°l√≥k a list√°ban
    if (!users || users.length === 0) {
        alert('Nincsenek felhaszn√°l√≥k a rendszerben. El≈ësz√∂r hozzon l√©tre felhaszn√°l√≥t!');
        return;
    }

    // Sz≈±rj√ºk ki azokat a felhaszn√°l√≥kat, akiknek m√°r van k√°rty√°juk
    const usersWithCards = cards.map(card => card.user_id);
    const availableUsers = users.filter(user => !usersWithCards.includes(user.id));

    if (availableUsers.length === 0) {
        alert('Minden felhaszn√°l√≥nak m√°r van k√°rty√°ja. T√∂r√∂lj√∂n vagy m√≥dos√≠tson megl√©v≈ë k√°rty√°kat, vagy hozzon l√©tre √∫j felhaszn√°l√≥t.');
        return;
    }

    const modalContent = `
        <form id="card-form">
            <div class="form-group">
                <label for="card-id">K√°rtya azonos√≠t√≥</label>
                <input type="text" id="card-id" name="card-id" required placeholder="Adja meg a k√°rtya azonos√≠t√≥j√°t">
                <div class="form-hint">A k√°rtya egyedi azonos√≠t√≥ja, amely az RFID chipben tal√°lhat√≥</div>
            </div>
            <div class="form-group">
                <label for="user-select">Felhaszn√°l√≥</label>
                <select id="user-select" name="user-select" required>
                    <option value="">V√°lasszon felhaszn√°l√≥t</option>
                    ${availableUsers.map(user => `<option value="${user.id}">${user.first_name} ${user.last_name}</option>`).join('')}
                </select>
                <div class="form-hint">V√°lassza ki, melyik felhaszn√°l√≥hoz rendelje a k√°rty√°t (csak olyan felhaszn√°l√≥k jelennek meg, akiknek m√©g nincs k√°rty√°juk)</div>
            </div>
            <div class="form-group">
                <label for="expiry-date">Lej√°rati d√°tum (opcion√°lis)</label>
                <input type="date" id="expiry-date" name="expiry-date">
                <div class="form-hint">Ha √ºresen hagyja, a k√°rtya nem j√°r le</div>
            </div>
        </form>
    `;

    const handleConfirm = async () => {
        const cardId = document.getElementById('card-id').value;
        const userId = document.getElementById('user-select').value;
        const expiryDateElement = document.getElementById('expiry-date');
        const expiryDate = expiryDateElement.value ? new Date(expiryDateElement.value) : null;

        // R√©szletes hibaellen≈ërz√©s
        if (!cardId) {
            alert('K√©rj√ºk, adja meg a k√°rtya azonos√≠t√≥j√°t!');
            return;
        }

        if (!userId) {
            alert('K√©rj√ºk, v√°lasszon felhaszn√°l√≥t a list√°b√≥l!');
            return;
        }

        try {
            const response = await fetch('/api/cards', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify({
                    card_id: cardId,
                    user_id: Number(userId),
                    expiry_date: expiryDate
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Nem siker√ºlt a k√°rtya regisztr√°ci√≥ja');
            }

            alert('K√°rtya sikeresen regisztr√°lva!');
            hideModal();
            await fetchCards();
            showCardManagementModal(new Event('click'));
        } catch (error) {
            alert('Hiba t√∂rt√©nt: ' + error.message);
        }
    };

    showModal('K√°rtya regisztr√°l√°sa', modalContent, handleConfirm);
}

async function deleteCard(cardId) {
    try {
        const response = await fetch(`/api/cards/${cardId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Nem siker√ºlt a k√°rtya t√∂rl√©se');
        }

        alert('K√°rtya sikeresen t√∂r√∂lve!');
        await fetchCards();
        showCardManagementModal(new Event('click'));
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function blockCard(cardId) {
    try {
        const response = await fetch(`/api/cards/${cardId}/block`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Nem siker√ºlt a k√°rtya blokkol√°sa');
        }

        alert('K√°rtya sikeresen blokkolva!');
        await fetchCards();
        showCardManagementModal(new Event('click'));
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function unblockCard(cardId) {
    try {
        const response = await fetch(`/api/cards/${cardId}/unblock`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Nem siker√ºlt a k√°rtya felold√°sa');
        }

        alert('K√°rtya sikeresen feloldva!');
        await fetchCards();
        showCardManagementModal(new Event('click'));
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

async function revokeCard(cardId) {
    try {
        const response = await fetch(`/api/cards/${cardId}/revoke`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Nem siker√ºlt a k√°rtya visszavon√°sa');
        }

        alert('K√°rtya sikeresen visszavonva!');
        await fetchCards();
        showCardManagementModal(new Event('click'));
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}

function getCardStatusBadge(status) {
    switch (status) {
        case 'active': return 'badge-success';
        case 'blocked': return 'badge-warning';
        case 'revoked': return 'badge-error';
        case 'expired': return 'badge-error';
        case 'pending': return 'badge-primary';
        default: return 'badge-primary';
    }
}

function translateCardStatus(status) {
    const statusMap = {
        'active': 'Akt√≠v',
        'blocked': 'Blokkolt',
        'revoked': 'Visszavont',
        'expired': 'Lej√°rt',
        'pending': 'F√ºgg≈ëben'
    };
    return statusMap[status] || status;
}

// Lej√°r√≥ k√°rty√°k tab bet√∂lt√©se
async function loadExpiringCardsTab() {
    const container = document.getElementById('tab-expiring-container');
    if (!container) return;

    container.innerHTML = '<p class="loading-message">Lej√°r√≥ k√°rty√°k bet√∂lt√©se...</p>';

    try {
        const response = await fetch('/api/cards/expiring', {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            throw new Error('Nem siker√ºlt a lej√°r√≥ k√°rty√°k lek√©r√©se');
        }

        const expiringCards = await response.json();

        if (!expiringCards || expiringCards.length === 0) {
            container.innerHTML = '<p class="info-message">Nincsenek hamarosan lej√°r√≥ k√°rty√°k</p>';
            return;
        }

        // Rendezz√ºk a k√°rty√°kat a lej√°rat d√°tuma szerint
        expiringCards.sort((a, b) => new Date(a.expiry_date) - new Date(b.expiry_date));

        // T√°bl√°zat l√©trehoz√°sa
        let tableHTML = `
            <div class="table-responsive">
                <table id="expiring-cards-table">
                    <thead>
                        <tr>
                            <th>Felhaszn√°l√≥</th>
                            <th>K√°rtya azonos√≠t√≥</th>
                            <th>Lej√°rati d√°tum</th>
                            <th>H√°tralev≈ë id≈ë</th>
                            <th>M≈±veletek</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

        expiringCards.forEach(card => {
            const expiryDate = new Date(card.expiry_date);
            const today = new Date();
            const daysRemaining = Math.ceil((expiryDate - today) / (1000 * 60 * 60 * 24));

            const userName = card.user ? `${card.user.first_name} ${card.user.last_name}` : 'Ismeretlen';

            // Oszt√°lyoz√°s a h√°tral√©v≈ë napok sz√°ma alapj√°n
            let rowClass = '';
            if (daysRemaining <= 7) {
                rowClass = 'urgent-row';
            } else if (daysRemaining <= 30) {
                rowClass = 'warning-row';
            }

            tableHTML += `
                <tr class="${rowClass}">
                    <td>${userName}</td>
                    <td>${card.card_id}</td>
                    <td>${expiryDate.toLocaleDateString('hu-HU')}</td>
                    <td><span class="badge ${daysRemaining <= 7 ? 'badge-error' : 'badge-warning'}">${daysRemaining} nap</span></td>
                    <td>
                        <button class="extend-card-tab" data-id="${card.id}">Hosszabb√≠t√°s</button>
                        <button class="edit-card" data-id="${card.id}">Szerkeszt√©s</button>
                        ${card.status === 'active' ? `<button class="block-card" data-id="${card.id}">Z√°rol√°s</button>` : ''}
                    </td>
                </tr>
            `;
        });

        tableHTML += `</tbody></table></div>`;

        container.innerHTML = tableHTML;

        // Esem√©nykezel≈ëk hozz√°ad√°sa
        document.querySelectorAll('.extend-card-tab').forEach(button => {
            button.addEventListener('click', () => {
                const cardId = button.getAttribute('data-id');
                showExtendCardForm(cardId);
            });
        });

        document.querySelectorAll('#tab-expiring-container .edit-card').forEach(button => {
            button.addEventListener('click', () => {
                const cardId = button.getAttribute('data-id');
                showEditCardForm(cardId);
            });
        });

        document.querySelectorAll('#tab-expiring-container .block-card').forEach(button => {
            button.addEventListener('click', async () => {
                const cardId = button.getAttribute('data-id');
                if (confirm('Biztosan z√°rolni szeretn√© ezt a k√°rty√°t?')) {
                    await blockCard(cardId);
                }
            });
        });
        
        // Ellen≈ërizz√ºk a scrollbart, amikor a t√°bl√°zat beillesztve
        // K√©t id≈ëpontban ellen≈ërizz√ºk: azonnal, √©s kis k√©sleltet√©ssel is (tartalmi bet√∂lt√©s ut√°n)
        if (typeof checkScrollbars === 'function') {
            checkScrollbars();
            setTimeout(checkScrollbars, 100);
        }
        
        // Aktiv√°ljuk a keres√©st az √∫j bet√∂lt√∂tt t√°bl√°zatra
        const searchInput = document.getElementById('expiring-card-search');
        if (searchInput && searchInput.value) {
            // Ha m√°r van keres√©si √©rt√©k, alkalmazzuk azt
            searchInput.dispatchEvent(new Event('input'));
        }

    } catch (error) {
        // Console.error elt√°vol√≠tva
        container.innerHTML = '<p class="error-message">Hiba t√∂rt√©nt a lej√°r√≥ k√°rty√°k bet√∂lt√©se k√∂zben.</p>';
    }
}

// K√°rtya hosszabb√≠t√°s ≈±rlap megjelen√≠t√©se
async function showExtendCardForm(cardId) {
    try {
        // K√°rtya adatainak bet√∂lt√©se
        const response = await fetch(`/api/cards/${cardId}`, {
            headers: {
                'Authorization': `Bearer ${authToken}`
            }
        });

        if (!response.ok) {
            throw new Error('Nem siker√ºlt a k√°rtya adatok lek√©r√©se');
        }

        const card = await response.json();
        const currentExpiry = card.expiry_date ? new Date(card.expiry_date) : new Date();

        // Alap√©rtelmezett √∫j lej√°rat: 1 √©v a mostani d√°tumt√≥l
        const defaultNewExpiry = new Date();
        defaultNewExpiry.setFullYear(defaultNewExpiry.getFullYear() + 1);

        // Form√°tum konverzi√≥ az input mez≈ëh√∂z (YYYY-MM-DD)
        const formatDate = (date) => {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        };

        const userName = card.user ? `${card.user.first_name} ${card.user.last_name}` : 'Ismeretlen';

        const formContent = `
            <form id="extend-card-form">
                <div class="card extend-card-summary mb-lg">
                    <div class="card-header">
                        <h3 class="card-title">K√°rtya adatai</h3>
                    </div>
                    <div class="extend-card-info">
                        <div class="extend-card-user">
                            <strong>${userName}</strong>
                            <span class="badge badge-primary">${translateCardStatus(card.status || 'active')}</span>
                        </div>
                        <div class="extend-card-details">
                            <div class="detail-row">
                                <span class="detail-label">K√°rtya ID:</span>
                                <span class="detail-value">${card.card_id}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Jelenlegi lej√°rat:</span>
                                <span class="detail-value">${currentExpiry.toLocaleDateString('hu-HU')}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Kiad√°s d√°tuma:</span>
                                <span class="detail-value">${new Date(card.issue_date).toLocaleDateString('hu-HU')}</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-divider"></div>

                <div class="form-group">
                    <label for="new-expiry-date">√öj lej√°rati d√°tum</label>
                    <input type="date" id="new-expiry-date" name="new-expiry-date" value="${formatDate(defaultNewExpiry)}" required>
                    <div class="form-hint">A k√°rtya √∫j lej√°rati d√°tuma. Az alap√©rtelmezett √©rt√©k 1 √©v a mai napt√≥l.</div>
                </div>
            </form>
        `;

        const handleConfirm = async () => {
            const newExpiryStr = document.getElementById('new-expiry-date').value;
            if (!newExpiryStr) {
                alert('K√©rj√ºk, adja meg az √∫j lej√°rati d√°tumot!');
                return;
            }

            const newExpiry = new Date(newExpiryStr);
            const today = new Date();

            if (newExpiry <= today) {
                alert('Az √∫j lej√°rati d√°tumnak a mai napn√°l k√©s≈ëbbinek kell lennie!');
                return;
            }

            try {
                const response = await fetch(`/api/cards/${cardId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        expiry_date: newExpiry.toISOString()
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Nem siker√ºlt a k√°rtya hosszabb√≠t√°sa');
                }

                alert('K√°rtya sikeresen hosszabb√≠tva!');
                hideModal();

                // Friss√≠ts√ºk a k√°rty√°kat √©s a lej√°r√≥ k√°rty√°k list√°j√°t
                await Promise.all([
                    fetchCards(),
                    loadExpiringCardsTab()
                ]);

                // Friss√≠ts√ºk a dashboard-ot is, ha van rajta lej√°r√≥ k√°rty√°k lista
                if (typeof fetchExpiringCards === 'function') {
                    fetchExpiringCards();
                }

                // Friss√≠ts√ºk a k√°rty√°k kezel√©se modalt
                showCardManagementModal();
            } catch (error) {
                alert('Hiba t√∂rt√©nt: ' + error.message);
            }
        };

        showModal('K√°rtya hosszabb√≠t√°sa', formContent, handleConfirm);
    } catch (error) {
        alert('Hiba t√∂rt√©nt: ' + error.message);
    }
}